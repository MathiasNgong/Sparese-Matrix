#include <iostream>
#include <list>

using namespace std;


struct node //defining the node class(struct)
{
	int nx1,ny1,nx2,ny2,nkey,ngrp;
  int nnkey;

	node *p_node; // prevoous node ponter
	node *n_node; //next node pointer
};

class double_LL
{


public:
	node *front; // pointer to the first node of the list
	node *end;	 // pointer to the last node of the list
	// MaxHeap maxHeap1 = MaxHeap(100000000);
	double_LL()
	{
		front = NULL;
		end = NULL;
	}
	void add_end(int ax1,int ay1,int ax2,int ay2, int akey)
	{
		// create new node
		node *temp;
		temp = new node();
		temp->nx1 = ax1;
    temp->ny1 = ay1;
		temp->nx2 = ax2;
    temp->ny2 = ay2;
     temp->nkey = akey;

		temp->p_node = end;
		temp->n_node = NULL;
		// if list is empty
		if (end == NULL)
			front = temp;
		else
			end->n_node = temp;
		end = temp;
	}
	int check(long ch) //checking the list to see if the address is already there
	{
		node *traverse;
		traverse = front;
		while (traverse != NULL) //traversing the list and checking if address is in it
		{
			if (traverse->nkey == ch)
			{
				return 0;
			}
			traverse = traverse->n_node;
		}
		return 1;
	}
	void increm(long key, int re) //increments the req for addresses that have been seen before
	{
		node *traverse;
		traverse = front;
		while (traverse != NULL)
		{

			// cout<<traverse->data<<endl;
			if (traverse->nkey == key)
			{
				traverse->ngrp= traverse->ngrp + re;
			}
			traverse = traverse->n_node;
		}
	}
	void forward_print() //seasrching for the seen address
	{
		node *traverse;
		traverse = front;
		while (traverse != NULL)
		{	
				std::cout << traverse->nx1 << " , " << traverse->ny1 << " , "<< traverse->nx2 << " , " << traverse->ny2<<" , " << traverse->nkey<< " => ";

			traverse = traverse->n_node;
		}
	}

};
//end linked list imp


class HashTable{
private:
 	double_LL *table;
	long total_elements;
	// Hash function to calculate hash for an ip and return the key
	long hash_it(long kk)
	{
		long key =kk % total_elements;//calculating the key by doing the simple modulus with the number of spots in the hash table
		return key;
	}

public:
  // Constructor to create a hash table with 'n' indices:
  HashTable(int n){
    total_elements = 3;
    table = new double_LL[total_elements];
  }

  // Insert data in the hash table:
  void insertElement(int ix1,int iy1, int ix2,int iy2){
    //start making key by converting the ints to string then concatenate to creat key
    string sx1 = to_string(ix1);
    string sy1 = to_string(iy1);
     string sx2 = to_string(ix2);
    string sy2 = to_string(iy2);

    int key = stoi(sx1+sy1+sx2+sy2);
    //end making the key 

  
    //hashing using the new key and the hashing function
    table[hash_it(key)].add_end(ix1,iy1, ix2,iy2, key);

  }

  // Remove data from the hash table:
  /*
  void removeElement(int key){
    int x = hash_it(key);

    list<int>::iterator i; 
    for (i = table[x].begin(); i != table[x].end(); i++) { 
      // Check if the iterator points to the required item:
      if (*i == key) 
        break;
    }

    // If the item was found in the list, then delete it:
    if (i != table[x].end()) 
      table[x].erase(i);
  }
*/
  void printAll(){
    // Traverse each index:
    for(int i = 0; i < total_elements; i++){
      cout << "Index " << i << ": ";
      // Traverse the list at current index:
       table[i].forward_print();
	

      cout << endl;
    }
  }
};

int main() {
  // Create a hash table with 3 indices:
  HashTable ht(3);

  // Declare the data to be stored in the hash table:
  int arr[] = {2, 4, 6, 8, 10};
   int arr1[] = {1, 3, 5, 7, 9};
    int arr2[] = {12, 14, 16, 18, 20};
     int arr3[] = {11, 13, 15, 17, 19};

  // Insert the whole data into the hash table:
  for(int i = 0; i < 5; i++)
    ht.insertElement(arr[i],arr1[i],arr2[i],arr3[i]);

  cout << "..:: Hash Table ::.." << endl;
  ht.printAll();
  
  // ht.removeElement(4);
  cout << endl << "..:: After deleting 4 ::.." << endl;
  ht.printAll();

  return 0;
}
